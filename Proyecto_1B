/*
 *                         UNIVERSIDAD TÉCNICA DEL NORTE 
 *                            PROYECTO 1ER BIMESTRE
 *                             SISTEMAS EMBEBIDOS
 *                       NAVARRETE GUSTAVO - VILATUÑA JUAN
 *                       
 */

///////////////////////////// APLICACION DE FILTRO MEDIANA ////////////////////////////////////


#define tamVentana 11 //tamaño de la ventana
int vec[tamVentana]; //vector tamaño de la ventana
int dato = 0;
int sum = 0;

int val;



void setup() {

  Serial.begin(9600);
  for(int i=0; i<tamVentana;i++){
    vec[i]=0;
  }

}

void loop() {
  vec[dato] = analogRead(A0); //lee un valor del puerto analogico y lo guarda en el vector que inicia en la posicion 0
  Serial.print(vec[dato]); //imprime el valor 
  dato++; //incremento
  if (dato>= tamVentana){
    dato = 0;
  }
  val = mediana(vec,tamVentana); //evalua el valor del medio con el metodo de ordenamiento 
  Serial.print(","); // imprime 
  Serial.println(val); // imprime dato 
  delay(10); 
  

}

int mediana (int vec1[],int tam){
  for(int i=0;i<tam;i++){  //ordenamos el vector de menor a mayor metodo burbuja 
    float j = vec1[i];
    int x;
    for(x = i-1; (x>=0) && (j<vec1[x]);x--){
      vec1[x+1] = vec1[x];
    }
    vec1[x+1] = j;
  }
  return vec1[tamVentana/2]; //valor de la mitad del vector
}

void imprimir (int vec1[], int tam) {
  for (int i = 0; i < tam; i++) {
    Serial.println(vec1[i]);

  }

}


//FILTRO PROMEDIO

/*
 *                         UNIVERSIDAD TÉCNICA DEL NORTE 
 *                            PROYECTO 1ER BIMESTRE
 *                             SISTEMAS EMBEBIDOS
 *                       NAVARRETE GUSTAVO - VILATUÑA JUAN
 *                       
 */

///////////////////////////// APLICACION DE FILTRO PROMEDIO ////////////////////////////////////


#define tamVentana 13 //tamaño de la ventana 
int vec [tamVentana]; //vector del mismo tamaño
int dato=0;
int sum=0;
int prom = 0;


void setup() {
  Serial.begin(9600);
  for(int i=0; i<tamVentana;i++){ //comienza en 0 hasta el tamaño de la ventana (13), 
    vec[i] = 0; //llena de ceros el vector para inicializarlos si hace falta algun dato este se rellene con ceros
  }

}

void loop() {
  sum -= vec[dato]; // resta el valor de la suma menos el ultimo valor del vector 
  vec[dato] = analogRead(A0); //lee un valor del puerto analogico y lo guarda en el vector que inicia en la posicion 0
  Serial.print(vec[dato]); //imprime el valor 
  sum += vec[dato]; //suma el valor que se guardo
  dato++; //incremento 
  if(dato>=tamVentana){
    dato=0;
  }
  prom = sum / tamVentana; //promedio de la suma calculada de los datos del vector sobre el tamaño del vector (13)
  Serial.print(",");
  Serial.println(prom); //imprime el nuevo dato

}


/*
 *                         UNIVERSIDAD TÉCNICA DEL NORTE 
 *                            PROYECTO 1ER BIMESTRE
 *                             SISTEMAS EMBEBIDOS
 *                       NAVARRETE GUSTAVO - VILATUÑA JUAN
 *                       
 */

///////////////////////////// RELACION SEÑAL RUIDO  ////////////////////////////////////


#include "ecgSignal.h" //Importamos el archivo de las muestras

#define tam_ventana 17 //Definimos el filtro promedio
int centrar_ventana = tam_ventana / 2; //realizamos el filtro promedio
int tam_senal = sizeof(ecg_100Hz) / sizeof(int);
int senal_filtrada[300]; //almacenamos los valores de las muestras
int valor_derecha = 0; //aux
int valor_izquierda = 0; //aux


void setup() {
  Serial.begin(9600);
  Serial.println(tam_senal);
  
  for (int i = 0; i < 300; i++) {senal_filtrada[i] = 0;} //enceramos el vector de salida
  
  for (int i = centrar_ventana; i < tam_senal - centrar_ventana; i++) { //recorremos el vector y se encuentra el centro
    
    Serial.print((ecg_100Hz[i])); //imprime la señal original
    
    valor_derecha = i - centrar_ventana;//posicion inicial de la ventana
    valor_izquierda = i + centrar_ventana + 1; //posicion final de la ventana
    Serial.print(",");
    
    int value = calc_mean(valor_derecha, valor_izquierda); //calculo del promedio
    senal_filtrada[i] = value; //guardamos el valor en el vector de salida
    Serial.println(value);
  };

  
  float mean_input = calc_mean_snr(ecg_100Hz, 300); //se saca el promedio de la señal original
  float deviation_input = calc_stdrDeviation(ecg_100Hz, 300); //se saca la desviacion estandar 
  Serial.println("SNR Input Signal: " + String(mean_input/deviation_input)); 


  float mean_output = calc_mean_snr(senal_filtrada, 300); //relacion S/R de la señal filtrada
  float deviation_output = calc_stdrDeviation(senal_filtrada, 300); //desviacion estandar 
  Serial.println("SNR Output Signal: " + String(mean_output/deviation_output));//impresion del resultado



  
}

void loop() {
}
int calc_mean(int valor_inicial, int valor_final) {//calculo del promedio
  int suma = 0;
  for ( int i = valor_inicial; i <= valor_final; i++) { //desde el valor incial al final
    suma += ecg_100Hz[i]; //Guardamos lo que tenga la señal en todas las posiciones 
  }
  return suma / tam_ventana; //retornamos la suma / tamaño de la ventana
}

void printVector (int vector[], int n) {
  for (int i = 0; i < n; i++) {
    Serial.println(vector[i]);
  }
}


float calc_mean_snr(int vector[], int n) { //Sacar el promedio de la señal
  int suma = 0;
  for (int i = 0; i < n; i++) { //Se realiza la suma
    suma += vector[i];
  }
  return suma / n; //dividimos la suma para la longitud del vector
}


float calc_stdrDeviation(int vector[], int n) {//Sacar desviacion estandar
  float promedio = calc_mean_snr(vector, n); //Llamamos al promedio
  float sumatoria = 0; //sumatoria 
  for (int i = 0; i < n; i++) {//El vector se lo resta el promedio al cuadrado
    sumatoria += pow(vector[i] - promedio, 2);
  }
  return sqrt(sumatoria / (n - 1)); //Sacamos la raiz cuadrada para tener la desviacion.
}


/*
 *                         UNIVERSIDAD TÉCNICA DEL NORTE 
 *                            PROYECTO 1ER BIMESTRE
 *                             SISTEMAS EMBEBIDOS
 *                       NAVARRETE GUSTAVO - VILATUÑA JUAN
 *                       
 */

///////////////////////////// CONVOLUCIÓN  ////////////////////////////////////


#include "data.h" //importar los datos de muestra
//int input_signal[] = {2, 1, 4, 3, 5, 9, 1, 6,2, 5, 1, 5, 3, 5, 7, 8};
#define tam_ventana 7 //Tamaño de la ventana 
#define ventana_central (tam_ventana/2) // Hallamos el centro de la ventana

float kernel[tam_ventana] = {0.2, 0.2, 0.2, 0.2, 0.2};  //Hallamos el kernell de la ventana 1/5; 
//float kernel[tam_ventana] = {0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125};  // 1/8;
float temp_vector[tam_ventana] = {0, 0, 0, 0, 0}; //Creamos un vector temporal de ceros

int tam_senal = sizeof(ecg_100Hz) / sizeof(int); //Calculamos el tamaño del vector y obtenemos el .length

void setup() {
  Serial.begin(9600);
  for (int i = ventana_central; i < tam_senal - ventana_central; i++) {//recorremos el vector y se encuentra el centro
    int valores_derecha = i - ventana_central; //Tomamos los n valores a la derecha
    int valores_izquierda = i + ventana_central + 1; //Tomamos los n valores hacia a izquierda
    Serial.print(ecg_100Hz[i]); //Imprimimos la señal original
    float value = convolve(valores_derecha, valores_izquierda);//Realizamos la convolucion
    Serial.print(",");
    Serial.println(value); //imprimimos en el terminal
  }
}



void loop() {
  // put your main code here, to run repeatedly:

}

void printVector (int vector[], int n) {
  for (int i = 0; i < n; i++) {
    Serial.print(vector[i]);
    Serial.print(" ");
  }
  Serial.println("");
}

float convolve(int inicio, int fin) {//convolucion
  int j = 0;
 
  for (int i = inicio; i <= fin; i++) {//desde el valor inicial al final en el vector de ceros se cambian los valores por nuestra señal original 
    if ( j < tam_ventana) {
      temp_vector[j] = ecg_100Hz[i];
      j++;

    } else {
      j = 0;
    }

  }

  float multiplicacion[tam_ventana]; //multiplicamos los valores reemplados por el valor del kernell
  float suma = 0;
  for (uint8_t i = 0; i < tam_ventana; i++){//Se realiza la multiplicacion por los valores del kernell
    multiplicacion[i] = temp_vector[i]*kernel[i];
    suma += multiplicacion[i]; //sumamos los valores 
    
    }
  return suma; //retornamos la suma

}










